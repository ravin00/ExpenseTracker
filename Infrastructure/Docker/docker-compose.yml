services:
  # PostgreSQL Database (ARM64 compatible)
  postgres:
    image: postgres:16-alpine
    container_name: expensetracker-postgres
    environment:
      - POSTGRES_DB=${AUTH_DB_NAME:-AuthDb}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-StrongPassword123!}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - expensetracker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Auth Service
  auth-service:
    build:
      context: ../../Backend/AuthService
      dockerfile: Dockerfile
    container_name: expensetracker-auth
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Host=${DB_SERVER:-postgres};Port=${DB_PORT:-5432};Database=${AUTH_DB_NAME:-AuthDb};Username=${DB_USER:-postgres};Password=${DB_PASSWORD:-StrongPassword123!}
      - Jwt__Secret=${JWT_SECRET:-your-super-secret-jwt-key-that-is-at-least-32-characters}
      - Jwt__Issuer=${JWT_ISSUER:-ExpenseTracker}
      - Jwt__Audience=${JWT_AUDIENCE:-ExpenseTrackerUsers}
    ports:
      - "${AUTH_SERVICE_PORT:-5001}:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - expensetracker-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=80"
      - "prometheus.io/path=/metrics"

  # Expense Service
  expense-service:
    build:
      context: ../../Backend/ExpenseService
      dockerfile: Dockerfile
    container_name: expensetracker-expense
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__ExpenseDb=Host=${DB_SERVER:-postgres};Port=${DB_PORT:-5432};Database=${EXPENSE_DB_NAME:-ExpenseDb};Username=${DB_USER:-postgres};Password=${DB_PASSWORD:-StrongPassword123!}
      - Jwt__Secret=${JWT_SECRET:-your-super-secret-jwt-key-that-is-at-least-32-characters}
      - Jwt__Issuer=${JWT_ISSUER:-ExpenseTracker}
      - Jwt__Audience=${JWT_AUDIENCE:-ExpenseTrackerUsers}
      - AuthService__BaseUrl=http://auth-service:80
    ports:
      - "${EXPENSE_SERVICE_PORT:-5002}:80"
    depends_on:
      - postgres
      - auth-service
    networks:
      - expensetracker-network
    restart: unless-stopped
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=80"
      - "prometheus.io/path=/metrics"

  # Category Service
  category-service:
    build:
      context: ../../Backend/CategoryService
      dockerfile: Dockerfile
    container_name: expensetracker-category
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__CategoryDb=Host=${DB_SERVER:-postgres};Port=${DB_PORT:-5432};Database=${CATEGORY_DB_NAME:-ExpenseTrackerCategories};Username=${DB_USER:-postgres};Password=${DB_PASSWORD:-StrongPassword123!}
      - Jwt__Secret=${JWT_SECRET:-your-super-secret-jwt-key-that-is-at-least-32-characters}
      - Jwt__Issuer=${JWT_ISSUER:-ExpenseTracker}
      - Jwt__Audience=${JWT_AUDIENCE:-ExpenseTrackerUsers}
      - AuthService__BaseUrl=http://auth-service:80
    ports:
      - "${CATEGORY_SERVICE_PORT:-5003}:80"
    depends_on:
      - postgres
      - auth-service
    networks:
      - expensetracker-network
    restart: unless-stopped
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=80"
      - "prometheus.io/path=/metrics"

  # Budget Service
  budget-service:
    build:
      context: ../../Backend/BudgetService
      dockerfile: Dockerfile
    container_name: expensetracker-budget
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__BudgetDb=Host=${DB_SERVER:-postgres};Port=${DB_PORT:-5432};Database=${BUDGET_DB_NAME:-ExpenseTrackerBudgets};Username=${DB_USER:-postgres};Password=${DB_PASSWORD:-StrongPassword123!}
      - Jwt__Secret=${JWT_SECRET:-your-super-secret-jwt-key-that-is-at-least-32-characters}
      - Jwt__Issuer=${JWT_ISSUER:-ExpenseTracker}
      - Jwt__Audience=${JWT_AUDIENCE:-ExpenseTrackerUsers}
      - AuthService__BaseUrl=http://auth-service:80
    ports:
      - "${BUDGET_SERVICE_PORT:-5004}:80"
    depends_on:
      - postgres
      - auth-service
    networks:
      - expensetracker-network
    restart: unless-stopped
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=80"
      - "prometheus.io/path=/metrics"

  # Savings Goal Service
  savings-goal-service:
    build:
      context: ../../Backend/SavingsGoalService
      dockerfile: Dockerfile
    container_name: expensetracker-savings
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__SavingsGoalDb=Host=${DB_SERVER:-postgres};Port=${DB_PORT:-5432};Database=${SAVINGS_DB_NAME:-ExpenseTrackerSavingsGoals};Username=${DB_USER:-postgres};Password=${DB_PASSWORD:-StrongPassword123!}
      - Jwt__Secret=${JWT_SECRET:-your-super-secret-jwt-key-that-is-at-least-32-characters}
      - Jwt__Issuer=${JWT_ISSUER:-ExpenseTracker}
      - Jwt__Audience=${JWT_AUDIENCE:-ExpenseTrackerUsers}
      - AuthService__BaseUrl=http://auth-service:80
    ports:
      - "${SAVINGS_SERVICE_PORT:-5005}:80"
    depends_on:
      - postgres
      - auth-service
    networks:
      - expensetracker-network
    restart: unless-stopped
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=80"
      - "prometheus.io/path=/metrics"

  # Analytics Service
  analytics-service:
    build:
      context: ../../Backend/AnalyticsService
      dockerfile: Dockerfile
    container_name: expensetracker-analytics
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__AnalyticsDb=Host=${DB_SERVER:-postgres};Port=${DB_PORT:-5432};Database=${ANALYTICS_DB_NAME:-ExpenseTrackerAnalyticsDb};Username=${DB_USER:-postgres};Password=${DB_PASSWORD:-StrongPassword123!}
      - Jwt__Secret=${JWT_SECRET:-your-super-secret-jwt-key-that-is-at-least-32-characters}
      - Jwt__Issuer=${JWT_ISSUER:-ExpenseTracker}
      - Jwt__Audience=${JWT_AUDIENCE:-ExpenseTrackerUsers}
      - ExpenseService__BaseUrl=http://expense-service:80
      - BudgetService__BaseUrl=http://budget-service:80
    ports:
      - "${ANALYTICS_SERVICE_PORT:-5006}:80"
    depends_on:
      - postgres
      - expense-service
      - budget-service
    networks:
      - expensetracker-network
    restart: unless-stopped
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=80"
      - "prometheus.io/path=/metrics"

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: expensetracker-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ../Monitoring/Prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - expensetracker-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: expensetracker-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ../Monitoring/Grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../Monitoring/Grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - expensetracker-network
    restart: unless-stopped

  # nginx reverse proxy (API Gateway)
  gateway:
    image: nginx:alpine
    container_name: expensetracker-gateway
    ports:
      - "${GATEWAY_PORT:-8080}:80"
    volumes:
      - ../../nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - auth-service
      - expense-service
      - category-service
      - budget-service
      - savings-goal-service
      - analytics-service
    networks:
      - expensetracker-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  expensetracker-network:
    driver: bridge
