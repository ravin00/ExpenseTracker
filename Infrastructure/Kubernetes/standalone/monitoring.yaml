apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: expensetracker
  labels:
    app.kubernetes.io/name: expensetracker
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: argocd
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'expensetracker-k8s'
        environment: 'production'
    
    rule_files:
      - "alert_rules.yml"
    
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093
    
    scrape_configs:
      # Kubernetes API server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
      
      # Kubernetes nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics
      
      # ExpenseTracker services
      - job_name: 'expensetracker-services'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - action: keep
            source_labels: [__meta_kubernetes_namespace]
            regex: expensetracker
          - action: keep
            source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            regex: true
          - action: replace
            source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            target_label: __metrics_path__
            regex: (.*)
            replacement: $1
          - action: replace
            source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port]
            target_label: __address__
            regex: (.*)
            replacement: $1
          - action: replace
            source_labels: [__meta_kubernetes_pod_ip, __meta_kubernetes_pod_annotation_prometheus_io_port]
            target_label: __address__
            regex: (.*);(.*)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - action: replace
            source_labels: [__meta_kubernetes_pod_name]
            target_label: kubernetes_pod_name
          - action: replace
            source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
      
      # PostgreSQL metrics (if postgres_exporter is added)
      - job_name: 'postgres'
        static_configs:
          - targets: ['postgres-exporter:9187']
        scrape_interval: 30s
  
  alert_rules.yml: |
    groups:
      - name: expensetracker-alerts
        rules:
          - alert: ServiceDown
            expr: up == 0
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: "Service {{ $labels.job }} is down"
              description: "Service {{ $labels.job }} has been down for more than 5 minutes."
          
          - alert: HighMemoryUsage
            expr: (container_memory_usage_bytes / container_spec_memory_limit_bytes) * 100 > 80
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High memory usage on {{ $labels.pod_name }}"
              description: "Memory usage is above 80% for pod {{ $labels.pod_name }}."
          
          - alert: HighCPUUsage
            expr: (rate(container_cpu_usage_seconds_total[5m]) * 100) > 80
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High CPU usage on {{ $labels.pod_name }}"
              description: "CPU usage is above 80% for pod {{ $labels.pod_name }}."
          
          - alert: DatabaseConnectionFailed
            expr: postgres_up == 0
            for: 2m
            labels:
              severity: critical
            annotations:
              summary: "PostgreSQL connection failed"
              description: "Unable to connect to PostgreSQL database."
          
          - alert: PodCrashLooping
            expr: rate(kube_pod_container_status_restarts_total[15m]) > 0
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Pod {{ $labels.pod }} is crash looping"
              description: "Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is restarting frequently."
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: expensetracker
  labels:
    app: prometheus
    app.kubernetes.io/name: expensetracker
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: argocd
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: prometheus
      app.kubernetes.io/name: expensetracker
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        app: prometheus
        app.kubernetes.io/name: expensetracker
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/version: "latest"
    spec:
      serviceAccountName: prometheus-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
              - ALL
          args:
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/prometheus
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --storage.tsdb.retention.time=30d
            - --web.enable-lifecycle
            - --web.enable-admin-api
            - --log.level=info
          ports:
            - name: http
              containerPort: 9090
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: http
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /-/ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 4
            failureThreshold: 3
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus
              readOnly: true
            - name: storage
              mountPath: /prometheus
            - name: tmp
              mountPath: /tmp
          resources:
            requests:
              cpu: "200m"
              memory: "512Mi"
            limits:
              cpu: "1000m"
              memory: "2Gi"
      volumes:
        - name: config
          configMap:
            name: prometheus-config
        - name: storage
          persistentVolumeClaim:
            claimName: prometheus-storage-pvc
        - name: tmp
          emptyDir: {}
---
# Prometheus PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage-pvc
  namespace: expensetracker
  labels:
    app.kubernetes.io/name: expensetracker
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/managed-by: argocd
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
# Prometheus ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-service-account
  namespace: expensetracker
  labels:
    app.kubernetes.io/name: expensetracker
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/managed-by: argocd
automountServiceAccountToken: true
---
# Prometheus ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-cluster-role
  labels:
    app.kubernetes.io/name: expensetracker
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/managed-by: argocd
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
# Prometheus ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-cluster-role-binding
  labels:
    app.kubernetes.io/name: expensetracker
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/managed-by: argocd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-cluster-role
subjects:
- kind: ServiceAccount
  name: prometheus-service-account
  namespace: expensetracker
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: expensetracker
  labels:
    app: prometheus
    app.kubernetes.io/name: expensetracker
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: argocd
spec:
  selector:
    app: prometheus
    app.kubernetes.io/name: expensetracker
    app.kubernetes.io/component: monitoring
  ports:
    - name: http
      port: 9090
      targetPort: http
      protocol: TCP
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: expensetracker
  labels:
    app: grafana
    app.kubernetes.io/name: expensetracker
    app.kubernetes.io/component: visualization
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: argocd
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: grafana
      app.kubernetes.io/name: expensetracker
      app.kubernetes.io/component: visualization
  template:
    metadata:
      labels:
        app: grafana
        app.kubernetes.io/name: expensetracker
        app.kubernetes.io/component: visualization
        app.kubernetes.io/version: "latest"
    spec:
      serviceAccountName: expensetracker-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        runAsGroup: 472
        fsGroup: 472
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: grafana
          image: grafana/grafana:latest
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false  # Grafana needs write access for plugins and dashboards
            runAsNonRoot: true
            runAsUser: 472
            runAsGroup: 472
            capabilities:
              drop:
              - ALL
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: admin-password
            - name: GF_SECURITY_ADMIN_USER
              value: "admin"
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
            - name: GF_INSTALL_PLUGINS
              value: "grafana-piechart-panel,grafana-worldmap-panel"
            - name: GF_SERVER_ROOT_URL
              value: "https://monitoring.expensetracker.yourdomain.com/grafana"
            - name: GF_SERVER_SERVE_FROM_SUB_PATH
              value: "true"
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
          volumeMounts:
            - name: storage
              mountPath: /var/lib/grafana
            - name: tmp
              mountPath: /tmp
            - name: grafana-config
              mountPath: /etc/grafana/provisioning
              readOnly: true
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "1Gi"
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: grafana-storage-pvc
        - name: tmp
          emptyDir: {}
        - name: grafana-config
          configMap:
            name: grafana-config
---
# Grafana PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage-pvc
  namespace: expensetracker
  labels:
    app.kubernetes.io/name: expensetracker
    app.kubernetes.io/component: visualization
    app.kubernetes.io/managed-by: argocd
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Grafana Secrets
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secrets
  namespace: expensetracker
  labels:
    app.kubernetes.io/name: expensetracker
    app.kubernetes.io/component: visualization
    app.kubernetes.io/managed-by: argocd
type: Opaque
stringData:
  admin-password: "SuperSecureGrafanaPassword123!"
---
# Grafana Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: expensetracker
  labels:
    app.kubernetes.io/name: expensetracker
    app.kubernetes.io/component: visualization
    app.kubernetes.io/managed-by: argocd
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      editable: true
  dashboards.yml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: expensetracker
  labels:
    app: grafana
    app.kubernetes.io/name: expensetracker
    app.kubernetes.io/component: visualization
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: argocd
spec:
  selector:
    app: grafana
    app.kubernetes.io/name: expensetracker
    app.kubernetes.io/component: visualization
  ports:
    - name: http
      port: 3000
      targetPort: http
      protocol: TCP
  type: ClusterIP