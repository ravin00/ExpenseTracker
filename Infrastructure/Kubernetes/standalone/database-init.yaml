---
# Database Initialization Job - Best Practice for Microservices
# This job creates all required databases before services start
apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-db-init
  namespace: expensetracker
  labels:
    app.kubernetes.io/name: expensetracker
    app.kubernetes.io/component: database-init
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"  # Run before other services
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  ttlSecondsAfterFinished: 300  # Clean up after 5 minutes
  template:
    metadata:
      labels:
        app.kubernetes.io/name: expensetracker
        app.kubernetes.io/component: database-init
    spec:
      restartPolicy: OnFailure
      serviceAccountName: expensetracker-backup-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: db-init
        image: postgres:16-alpine
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          capabilities:
            drop:
            - ALL
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "üîó Database Initialization Job Started"
          echo "üìä PostgreSQL Server: $DB_HOST:$DB_PORT"
          echo "üë§ User: $DB_USER"
          
          # Wait for PostgreSQL to be ready
          echo "‚è≥ Waiting for PostgreSQL to be ready..."
          until PGPASSWORD=$POSTGRES_PASSWORD psql -h $DB_HOST -U $DB_USER -d postgres -c '\q' 2>/dev/null; do
            echo "‚è≥ PostgreSQL is unavailable - sleeping"
            sleep 2
          done
          echo "‚úÖ PostgreSQL is ready!"
          
          # Function to create database if it doesn't exist
          create_database() {
            local db_name=$1
            echo "üóÑÔ∏è  Checking database: $db_name"
            
            # Check if database exists
            if PGPASSWORD=$POSTGRES_PASSWORD psql -h $DB_HOST -U $DB_USER -d postgres -lqt | cut -d \| -f 1 | grep -qw $db_name; then
              echo "‚úÖ Database '$db_name' already exists"
            else
              echo "üîß Creating database: $db_name"
              PGPASSWORD=$POSTGRES_PASSWORD psql -h $DB_HOST -U $DB_USER -d postgres -c "CREATE DATABASE \"$db_name\";"
              echo "‚úÖ Database '$db_name' created successfully"
            fi
          }
          
          # Create all required databases
          echo "üèóÔ∏è  Creating ExpenseTracker databases..."
          
          create_database "AuthDb"
          create_database "ExpenseDb" 
          create_database "ExpenseTrackerCategories"
          create_database "ExpenseTrackerBudgets"
          create_database "ExpenseTrackerSavingsGoals"
          create_database "ExpenseTrackerAnalyticsDb"
          
          echo "üéâ Database initialization completed successfully!"
          echo "üìã Created databases summary:"
          PGPASSWORD=$POSTGRES_PASSWORD psql -h $DB_HOST -U $DB_USER -d postgres -c "\l" | grep -E "(AuthDb|ExpenseDb|ExpenseTrackerCategories|ExpenseTrackerBudgets|ExpenseTrackerSavingsGoals|ExpenseTrackerAnalyticsDb)"
          
          echo "‚úÖ All databases are ready for microservices!"
        env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: expensetracker-config
              key: DB_SERVER
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: expensetracker-config
              key: DB_PORT
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: expensetracker-config
              key: DB_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: expensetracker-secrets
              key: DB_PASSWORD
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: tmp
        emptyDir: {}